AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  emr-tech-tools
  Sample SAM Template for emr-tech-tools

Parameters:
  Stage:
    Type: String
    Default: dev
  PipelineExecutionRole:
    Type: String

Globals:
  Function:
    Timeout: 10
    MemorySize: 128

Resources:
  # Existing EMRSpinUp Lambda function

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "emr-lambda-execution-role-${Stage}" 
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: [lambda.amazonaws.com]
          Action: 
            - sts:AssumeRole
      Path: /
      Policies: 
        - PolicyName: S3FullAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: s3:*
                Resource: '*'
        - PolicyName: EMRFullAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 'elasticmapreduce:*'
                Resource: '*'
        - PolicyName: PassRolePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: iam:PassRole
                Resource: '*'
        - PolicyName: AWSLambdaBasicExecutionRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'


  EMRSpinUp:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "emr-spinup-${Stage}"
      CodeUri: emr-tech-tools/emr/EMRSpinUp
      Handler: EMRSpinUp.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Role: !GetAtt LambdaExecutionRole.Arn
      

  # New EMRNotify Lambda function
  EMRNotify:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "emr-notify-${Stage}"
      CodeUri: emr-tech-tools/emr/EMRNotify
      Handler: EMRNotify.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Role: !GetAtt LambdaExecutionRole.Arn
      

  # New EMRTerminate Lambda function
  EMRTerminate:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "emr-terminate-${Stage}"
      CodeUri: emr-tech-tools/emr/EMRTerminate
      Handler: EMRTerminate.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Role: !GetAtt LambdaExecutionRole.Arn


  # New EMRRemainder Lambda function
  EMRRemainder:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "emr-reminder-${Stage}"
      CodeUri: emr-tech-tools/emr/EMRRemainder
      Handler: EMRRemainder.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Role: !GetAtt LambdaExecutionRole.Arn
      

  EMRStateMachine: 
    Type: AWS::Serverless::StateMachine
    Properties:
      Name: !Sub "emr-stateMachine-${Stage}"
      DefinitionUri: emr-tech-tools/emr/statemachine/statemachine.asl.json
      DefinitionSubstitutions: 
        EMRSpinUpArn: !GetAtt EMRSpinUp.Arn
        EMRNotifynArn: !GetAtt EMRNotify.Arn
        EMRTerminateArn: !GetAtt EMRTerminate.Arn
        EMRRemainderArn: !GetAtt EMRRemainder.Arn 
         
      Policies: 
        - LambdaInvokePolicy:
            FunctionName: !Ref EMRSpinUp
        - LambdaInvokePolicy: 
            FunctionName: !Ref EMRNotify 
        - LambdaInvokePolicy:
            FunctionName: !Ref EMRTerminate
        - LambdaInvokePolicy:
            FunctionName: !Ref EMRRemainder

  BootstrapActionsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "bootstrap-actions-emr-2-${Stage}"

  BootstrapActionsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref BootstrapActionsBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement: 
          - Effect: Allow
            Action: 
              - "s3:GetObject"
              - "s3:PutObject"
            Resource: 
              - !Sub "arn:aws:s3:::bootstrap-actions-emr-2-${Stage}/*"
            Principal:
              AWS: !Sub ${PipelineExecutionRole}



  EC2LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "ec2-lambda-execution-role-${Stage}" 
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: [lambda.amazonaws.com]
          Action: 
            - sts:AssumeRole
      Path: /
      Policies: 
        - PolicyName: S3FullAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: s3:*
                Resource: '*'
        - PolicyName: EC2FullAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 'ec2:*'
                Resource: '*'
        - PolicyName: PassRolePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: iam:PassRole
                Resource: '*'
        - PolicyName: AWSLambdaBasicExecutionRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'


  EC2SpinUp:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "ec2-spinup-${Stage}"
      CodeUri: emr-tech-tools/ec2/EC2Spinup
      Handler: EC2Spinup.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Role: !GetAtt EC2LambdaExecutionRole.Arn
      

  # New EC2Notify Lambda function
  EC2Notify:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "ec2-notify-${Stage}"
      CodeUri: emr-tech-tools/ec2/EC2Notify
      Handler: EC2Notify.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Role: !GetAtt EC2LambdaExecutionRole.Arn

  
  EC2NotifyWindows:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "ec2-notify-windows-${Stage}"
      CodeUri: emr-tech-tools/ec2/EC2NotifyWindows
      Handler: EC2NotifyWindows.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Role: !GetAtt EC2LambdaExecutionRole.Arn
      

  # New EC2Terminate Lambda function
  EC2Terminate:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "ec2-terminate-${Stage}"
      CodeUri: emr-tech-tools/ec2/EC2Terminate
      Handler: EC2Terminate.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Role: !GetAtt EC2LambdaExecutionRole.Arn


  # New EMRRemainder Lambda function
  EC2Remainder:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "ec2-reminder-${Stage}"
      CodeUri: emr-tech-tools/ec2/EC2Remainder
      Handler: EC2Remainder.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Role: !GetAtt EC2LambdaExecutionRole.Arn

Outputs:
  EMRSpinUp:
    Description: "EMRSpinUp Lambda Function ARN"
    Value: !GetAtt EMRSpinUp.Arn

  # Outputs for the new functions
  EMRNotify:
    Description: "EMRNotify Lambda Function ARN"
    Value: !GetAtt EMRNotify.Arn

  EMRTerminate:
    Description: "EMRTerminate Lambda Function ARN"
    Value: !GetAtt EMRTerminate.Arn

  EMRRemainder:
    Description: "EMRRemainder Lambda Function ARN"
    Value: !GetAtt EMRRemainder.Arn
